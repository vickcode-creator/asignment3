from heapq import heappush, heappop, heapify
from collections import defaultdict

class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

def huffman_code_tree(data):
    if len(data) == 0:
        return {}

    freq = defaultdict(int)
    for char in data:
        freq[char] += 1

    heap = [Node(char, freq) for char, freq in freq.items()]
    heapify(heap)
    
    while len(heap) > 1:
        node1 = heappop(heap)
        node2 = heappop(heap)
        merged = Node(None, node1.freq + node2.freq)
        merged.left = node1
        merged.right = node2
        heappush(heap, merged)
    
    root = heap[0]
    codes = {}
    
    def generate_codes(node, current_code):
        if node is None:
            return
        
        if node.char is not None:
            codes[node.char] = current_code
        
        generate_codes(node.left, current_code + "0")
        generate_codes(node.right, current_code + "1")
    
    generate_codes(root, "")
    return codes

